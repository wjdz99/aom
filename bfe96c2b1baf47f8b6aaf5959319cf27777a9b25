{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b0cdc0b2_15792c4d",
        "filename": "CMakeLists.txt",
        "patchSetId": 18
      },
      "lineNbr": 205,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-08T15:37:02Z",
      "side": 1,
      "message": "Please add a `CONFIG_CWG_E050` cmake option (which defines the same-named C preprocessor macro), and guard the new code under this cmake option and macro. The reason is that CWG-E050 is still a proposal, so it should not appear in regular builds of libaom.\n\n`CONFIG_CWG_C013` can be used as an example.",
      "revId": "bfe96c2b1baf47f8b6aaf5959319cf27777a9b25",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d1d58e8_a25664de",
        "filename": "CMakeLists.txt",
        "patchSetId": 18
      },
      "lineNbr": 205,
      "author": {
        "id": 26789
      },
      "writtenOn": "2024-11-08T15:46:13Z",
      "side": 1,
      "message": "This is just a tool in the examples/ directory. Is it really necessary to have a compile flag?",
      "parentUuid": "b0cdc0b2_15792c4d",
      "revId": "bfe96c2b1baf47f8b6aaf5959319cf27777a9b25",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e7bf9fd_ab7544b1",
        "filename": "CMakeLists.txt",
        "patchSetId": 18
      },
      "lineNbr": 205,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-11T03:47:44Z",
      "side": 1,
      "message": "I recommend adding this flag. Also, CWG-E050 will need to be implemented in libaom (the reference implementation of AV1) at least on the decoder side, so we will need to add this flag eventually.",
      "parentUuid": "7d1d58e8_a25664de",
      "revId": "bfe96c2b1baf47f8b6aaf5959319cf27777a9b25",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0414b721_fe29a01f",
        "filename": "CMakeLists.txt",
        "patchSetId": 18
      },
      "lineNbr": 527,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-08T15:37:02Z",
      "side": 1,
      "message": "libaom requires only C++11 (or C++14?) now. It is best to follow Google Open Source Support Policies\u0027 [Foundational C++ Support Table]( https://github.com/google/oss-policies-info/blob/main/foundational-cxx-support-matrix.md#foundational-c-support) and require no more than C++14. Can the use of C++17 features (`std::optional`) be avoided?",
      "revId": "bfe96c2b1baf47f8b6aaf5959319cf27777a9b25",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9705c95e_931ef65f",
        "filename": "CMakeLists.txt",
        "patchSetId": 18
      },
      "lineNbr": 527,
      "author": {
        "id": 26789
      },
      "writtenOn": "2024-11-08T15:46:13Z",
      "side": 1,
      "message": "I was not aware of the c++14 policy. Again, this is just the examples/ directory so I thought it might be fine and std::optional makes the code nicer but I can do without it",
      "parentUuid": "0414b721_fe29a01f",
      "revId": "bfe96c2b1baf47f8b6aaf5959319cf27777a9b25",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c0e3599_389e97d3",
        "filename": "CMakeLists.txt",
        "patchSetId": 18
      },
      "lineNbr": 527,
      "author": {
        "id": 9088
      },
      "writtenOn": "2024-11-10T21:39:22Z",
      "side": 1,
      "message": "FYI, this way of enabling C++17 seems to fail with CMake 3.22.1 (the default one in Ubuntu 22.04) - the problem shows up as these files are compiled with the default C++11 mode and fail; with CMake 3.22.2 and newer, it builds correctly.",
      "parentUuid": "9705c95e_931ef65f",
      "revId": "bfe96c2b1baf47f8b6aaf5959319cf27777a9b25",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a9d8d70_f83e9cc2",
        "filename": "CMakeLists.txt",
        "patchSetId": 18
      },
      "lineNbr": 527,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-11T03:47:44Z",
      "side": 1,
      "message": "Thanks for the report, Martin. Maryla has fixed this in https://aomedia-review.googlesource.com/c/aom/+/194841.",
      "parentUuid": "1c0e3599_389e97d3",
      "revId": "bfe96c2b1baf47f8b6aaf5959319cf27777a9b25",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bb01c92_d5fff4ae",
        "filename": "examples/multilayer_metadata.cc",
        "patchSetId": 18
      },
      "lineNbr": 13,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-12-10T03:09:02Z",
      "side": 1,
      "message": "With Visual Studio 17:\n\n```\nexamples\\multilayer_metadata.cc.obj\n...\\Microsoft Visual Studio\\2022\\Professional\\VC\\Tools\\MSVC\\14.42.34433\\include\\optional(11): warning STL4038: The contents of \u003coptional\u003e are available only with C++17 or later.\n```",
      "revId": "bfe96c2b1baf47f8b6aaf5959319cf27777a9b25",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f438eb26_0504cf47",
        "filename": "examples/multilayer_metadata.h",
        "patchSetId": 18
      },
      "lineNbr": 36,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-08T15:37:02Z",
      "side": 1,
      "message": "If these types will eventually be used by the libaom library, it would be good to define them as C types.",
      "revId": "bfe96c2b1baf47f8b6aaf5959319cf27777a9b25",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e939ff6a_43d0cafa",
        "filename": "examples/multilayer_metadata.h",
        "patchSetId": 18
      },
      "lineNbr": 36,
      "author": {
        "id": 26789
      },
      "writtenOn": "2024-11-08T15:46:13Z",
      "side": 1,
      "message": "I was not planning on using them in libaom. libaom currently doesn\u0027t have any fancy apis for reading this kind of metadata, it only provides raw bytes, so I was going to do the same for now.",
      "parentUuid": "f438eb26_0504cf47",
      "revId": "bfe96c2b1baf47f8b6aaf5959319cf27777a9b25",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7af0e1b8_ef5dfc1a",
        "filename": "examples/multilayer_metadata.h",
        "patchSetId": 18
      },
      "lineNbr": 36,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-11T03:47:44Z",
      "side": 1,
      "message": "Thanks for the reply.",
      "parentUuid": "e939ff6a_43d0cafa",
      "revId": "bfe96c2b1baf47f8b6aaf5959319cf27777a9b25",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}