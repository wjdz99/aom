{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d9d80ad6_fa4b2f9f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-25T22:32:24Z",
      "side": 1,
      "message": "Nit/optional: I suggest moving this bug fix to a separate CL. Don\u0027t worry about this if it is difficult or doesn\u0027t make sense to separate the bug fix from this CL.",
      "revId": "af3353d1674464c40d44b584239789543fff0d9b",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "078a2b65_243e657c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 26789
      },
      "writtenOn": "2024-12-09T15:06:32Z",
      "side": 1,
      "message": "Done in https://aomedia-review.googlesource.com/c/aom/+/195501",
      "parentUuid": "d9d80ad6_fa4b2f9f",
      "revId": "af3353d1674464c40d44b584239789543fff0d9b",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e87ee782_aa265129",
        "filename": "aom/aom_image.h",
        "patchSetId": 9
      },
      "lineNbr": 190,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-25T22:32:24Z",
      "side": 1,
      "message": "[Note: The idea I proposed in this comment may be immature and the general issue of how to send a metadata OBU to the libaom encoder should be investigated further. This is why I suggest we move parts of this CL to separate CLs so they can be submitted first.]\n\nI just realized that there is another way to indicate whether a metadata OBU is layer-specific or not. We can add a new function, tentatively named `aom_img_add_metadata_v2`, that takes an `int is_layer_specific_obu` parameter:\n\n```\nint aom_img_add_metadata_v2(aom_image_t *img, uint32_t type, const uint8_t *data,\n                            size_t sz, aom_metadata_insert_flags_t insert_flag,\n                            int is_layer_specific_obu);\n```\n\nAnd then we add a new `int is_layer_specific_obu` field to the end of the `aom_metadata_t` struct:\n\n```\ntypedef struct aom_metadata {\n  uint32_t type;                           /**\u003c Metadata type */\n  uint8_t *payload;                        /**\u003c Metadata payload data */\n  size_t sz;                               /**\u003c Metadata payload size */\n  aom_metadata_insert_flags_t insert_flag; /**\u003c Metadata insertion flag */\n  int is_layer_specific_obu;               /**\u003c Whether metadata is layer-specific */\n} aom_metadata_t;\n```\n\nNote: We have avoided the use of the `bool` type in the libaom public headers. That\u0027s why the `is_layer_specific_obu` boolean is declared as `int`.\n\nWe can extend the `aom_metadata_t` struct without breaking backward compatibility because the `aom_metadata_t` struct is always allocated by libaom.\n\nNote: Although the `aom_metadata_t` struct allocation function `aom_img_metadata_alloc()` is exported, that was a mistake; it should have been an internal function.\n\nThis solution seems cleaner than modifying the `aom_metadata_insert_flags_t` enum type.",
      "revId": "af3353d1674464c40d44b584239789543fff0d9b",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50822d97_a11677fd",
        "filename": "aom/aom_image.h",
        "patchSetId": 9
      },
      "lineNbr": 190,
      "author": {
        "id": 26789
      },
      "writtenOn": "2024-11-26T13:14:23Z",
      "side": 1,
      "message": "I thought about this too but it seemed less intrusive to me to just reuse the insert_flag parameter, which seems fairly appropriate for this use in my opinion. \nHowever, this is not my library so if you prefer a different function or some other solution, I\u0027ll update the patch. In the \"new function\" scenario, would the current function be deprecated? And what would be a better name for aom_img_add_metadata_v2?\n\nAnother option would be to add a `aom_img_add_layer_specific_metadata()` function without any extra parameter.\n\nYet another solution is to not implement an API for this at all. For most metadata types, the spec says whether it\u0027s layer specific or not so it can be hard coded. This only one where it cannot be known in advance is ITUT T35, but I doubt many people need this, so it\u0027s not a critical feature. I implemented it anyway because it was convenient for me to experiment with the new CWG-E050 metadata types, and I thought it could provide more flexibility in general for future types and the \"user private\" section of the metadata type enum (although it\u0027s not super clear to me how it\u0027s supposed to be used).\n\nAnother suggestion from Yannis was to implement the layer specific bit (as in the first version of this patch, i.e. the 5th bit in aom_metadata_insert_flags) but to NOT add it to the API. This way it\u0027s an experimental/secret feature that I can use for my own needs but that is not at all guaranteed to keep working.",
      "parentUuid": "e87ee782_aa265129",
      "revId": "af3353d1674464c40d44b584239789543fff0d9b",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a7cd6df_0c7df26a",
        "filename": "aom/aom_image.h",
        "patchSetId": 9
      },
      "lineNbr": 190,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-12-10T22:08:10Z",
      "side": 1,
      "message": "Thank you for the reply. We need to investigate this further and pick a solution.",
      "parentUuid": "50822d97_a11677fd",
      "revId": "af3353d1674464c40d44b584239789543fff0d9b",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07a078e8_60c29fbd",
        "filename": "av1/encoder/bitstream.h",
        "patchSetId": 9
      },
      "lineNbr": 102,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-25T22:32:24Z",
      "side": 1,
      "message": "Nit: I suggest moving the addition of the `is_layer_specific_obu` parameter to `av1_write_obu_header()` to a separate CL. This part seems independent enough.",
      "revId": "af3353d1674464c40d44b584239789543fff0d9b",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "362c3765_68413171",
        "filename": "av1/encoder/bitstream.h",
        "patchSetId": 9
      },
      "lineNbr": 102,
      "author": {
        "id": 26789
      },
      "writtenOn": "2024-12-09T15:06:32Z",
      "side": 1,
      "message": "Done here. I meant to do this in a separate cl but it seems I overwrote this one by accident. So I guess I can submit this one first and then make API changes in another cl.",
      "parentUuid": "07a078e8_60c29fbd",
      "revId": "af3353d1674464c40d44b584239789543fff0d9b",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}