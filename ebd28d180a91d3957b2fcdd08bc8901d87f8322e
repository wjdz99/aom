{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7997ab7a_82613999",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-12-10T00:04:01Z",
      "side": 1,
      "message": "Thank you for updating the comments!",
      "revId": "ebd28d180a91d3957b2fcdd08bc8901d87f8322e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "267b69de_837ddcc5",
        "filename": "test/video_source.h",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-12-10T00:04:01Z",
      "side": 1,
      "message": "I found that the AV1 spec does not say all the OBUs in a temporal unit have the same temporal_id. But the libaom encoder seems to write a temporal delimiter before it writes an OBU with spatial_id\u003d0:\n\n```\n      const int write_temporal_delimiter \u003d\n          !cpi-\u003ecommon.spatial_layer_id \u0026\u0026 !ctx-\u003epending_cx_data_sz;\n```\n\nSo I think this comment is correct for the following code in `EncoderTest::RunLoop()` (in test/encode_test_driver.cc) and the libaom encoder:\n\n```\n    int number_spatial_layers \u003d GetNumSpatialLayers();\n\n    bool again;\n    for (again \u003d true; again; video-\u003eNext()) {\n      again \u003d (video-\u003eimg() !\u003d nullptr);\n\n      for (int sl \u003d 0; sl \u003c number_spatial_layers; sl++) {\n        PreEncodeFrameHook(video, encoder.get());\n        encoder-\u003eEncodeFrame(video, frame_flags_);\n        PostEncodeFrameHook(encoder.get());\n```\n\nMarco, does `EncoderTest::RunLoop()` assume there is only one temporal layer?",
      "revId": "ebd28d180a91d3957b2fcdd08bc8901d87f8322e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a34d560d_f0be8e70",
        "filename": "test/video_source.h",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-12-10T00:13:36Z",
      "side": 1,
      "message": "Marco: I found the answer to my question is No. My next question is where we update the temporal_id in the test. Can we go over the relevant code in person tomorrow morning to help me understand it?",
      "parentUuid": "267b69de_837ddcc5",
      "revId": "ebd28d180a91d3957b2fcdd08bc8901d87f8322e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11a42fec_e8cf5fda",
        "filename": "test/video_source.h",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 5190
      },
      "writtenOn": "2024-12-10T00:55:33Z",
      "side": 1,
      "message": "Sure we can go over the code tomorrow,  i need to review it myself too. RunLoop() should not assume only one temporal layer.",
      "parentUuid": "a34d560d_f0be8e70",
      "revId": "ebd28d180a91d3957b2fcdd08bc8901d87f8322e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "ebd28d180a91d3957b2fcdd08bc8901d87f8322e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "ebd28d180a91d3957b2fcdd08bc8901d87f8322e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ebd28d180a91d3957b2fcdd08bc8901d87f8322e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "ebd28d180a91d3957b2fcdd08bc8901d87f8322e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}